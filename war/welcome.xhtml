<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
   xmlns:f="http://java.sun.com/jsf/core"
   xmlns:h="http://java.sun.com/jsf/html"
   xmlns:ui="http://java.sun.com/jsf/facelets">
   	<h:head id="head">
      	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

      	<title>AGB-Analyse</title>
   	</h:head>
   	<h:body id="body">   
   		<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
      	<script>
		var diameter = 960,
		    format = d3.format(",d"),
		    color = d3.scale.category20c();
		
		var bubble = d3.layout.pack()
		    .sort(null)
		    .size([diameter, diameter])
		    .padding(1.5);
		
		var svg = d3.select("body").append("svg")
		    .attr("width", diameter)
		    .attr("height", diameter)
		    .attr("class", "bubble");
		
		d3.json("./flare.json", function(error, root) {
		  var node = svg.selectAll(".node")
		      .data(bubble.nodes(classes(root))
		      .filter(function(d) { return !d.children; }))
		    .enter().append("g")
		      .attr("class", "node")
		      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
		
		  node.append("title")
		      .text(function(d) { return d.className + ": " + format(d.value); });
		
		  node.append("circle")
		      .attr("r", function(d) { return d.r; })
		      .style("fill", function(d) { return color(d.packageName); });
		
		  node.append("text")
		      .attr("dy", ".3em")
		      .style("text-anchor", "middle")
		      .text(function(d) { return d.className.substring(0, d.r / 3); });
		});
		
		// Returns a flattened hierarchy containing all leaf nodes under the root.
		function classes(root) {
		  var classes = [];
		
		  function recurse(name, node) {
		    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
		    else classes.push({packageName: name, className: node.name, value: node.size});
		  }
		
		  recurse(null, root);
		  return {children: classes};
		}
		
		d3.select(self.frameElement).style("height", diameter + "px");
		
		</script>
		
		
		<style>
.bullet { font: 10px sans-serif; }
.bullet .marker { stroke: #000; stroke-width: 2px; }
.bullet .tick line { stroke: #666; stroke-width: .5px; }
.bullet .range.s0 { fill: #eee; }
.bullet .range.s1 { fill: #ddd; }
.bullet .range.s2 { fill: #ccc; }
.bullet .measure.s0 { fill: lightsteelblue; }
.bullet .measure.s1 { fill: steelblue; }
.bullet .title { font-size: 14px; font-weight: bold; }
.bullet .subtitle { fill: #999; }

</style>
<button>Update</button>

		<script src="bullet.js"></script>
		<script>
		
		var margin = {top: 5, right: 40, bottom: 20, left: 20},
		    width = 960 - margin.left - margin.right,
		    height = 50 - margin.top - margin.bottom;
		
		var chart = d3.bullet()
		    .width(width)
		    .height(height);
		
		d3.json("bullets.json", function(error, data) {
		  var svg = d3.select("body").selectAll("svg")
		      .data(data)
		    .enter().append("svg")
		      .attr("class", "bullet")
		      .attr("width", width + margin.left + margin.right)
		      .attr("height", height + margin.top + margin.bottom)
		    .append("g")
		      .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
		      .call(chart);
		
		  var title = svg.append("g")
		      .style("text-anchor", "end")
		      .attr("transform", "translate(-6," + height / 2 + ")");
		
		  title.append("text")
		      .attr("class", "title")
		      .text(function(d) { return d.title; });
		
		  title.append("text")
		      .attr("class", "subtitle")
		      .attr("dy", "1em")
		      .text(function(d) { return d.subtitle; });
		
		  d3.selectAll("button").on("click", function() {
		    svg.datum(randomize).call(chart.duration(1000)); // TODO automatic transition
		  });
		});
		
		function randomize(d) {
		  if (!d.randomizer) d.randomizer = randomizer(d);
		  d.ranges = d.ranges.map(d.randomizer);
		  d.markers = d.markers.map(d.randomizer);
		  d.measures = d.measures.map(d.randomizer);
		  return d;
		}
		
		function randomizer(d) {
		  var k = d3.max(d.ranges) * .2;
		  return function(d) {
		    return Math.max(0, d + k * (Math.random() - .5));
		  };
		}
		
		</script>
		
      	<h:form>
         	<h:inputText value="#{bean.name}"></h:inputText>
         	<h:commandButton value="Welcome Me" action="test"></h:commandButton>
      	</h:form>
	</h:body>
	</html>